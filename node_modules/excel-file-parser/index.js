exports.excelFileParser = function(fileName, tabName, metadataFields){
    var assert = require('assert');
    console.log(metadataFields);
    if(typeof require !== 'undefined') XLSX = require('xlsx');

    var mongodb = require('mongodb');
    var _ = require('underscore');

    var fs = require('fs');

    var Converter=require("csvtojson").core.Converter;

    var  distinctDataFields;

    var collectionFields = [];

    var MongoClient = mongodb.MongoClient;

    var url = 'mongodb://localhost:27017/datamanager-03-test';

    var workbook = XLSX.readFile('./uploads/' + fileName);

    var worksheet = workbook.Sheets[tabName];

    var metaFields = metadataFields;

    var json_conversion = XLSX.utils.sheet_to_json(worksheet);

    var csv_conversion = XLSX.utils.sheet_to_csv(worksheet);

    var csv_lines = csv_conversion.split('\n');

    var dirtyHeaderLine = csv_lines[0];

    var cleanHeaderLine = dirtyHeaderLine.replace(/\./g,"")
        .replace(/ /g,"")
        .replace(/"'"/g,"")
        .replace(/","/g,"")
        .replace(/"\/"/g,"")
        .replace(/"#"/g,"")
        .replace(/\(/g,"")
        .replace(/\)/g,"");

    cleanHeaderLine = cleanHeaderLine.replace(/,+$/, "");

    console.log(cleanHeaderLine);

    csv_lines[0] = cleanHeaderLine;

    var newCsvLines = [];

    csv_lines.forEach(function(line){
        if (line.charAt(0) == ',') { line = line.slice(1); }
        var currentIndex = csv_lines.indexOf(line);
        if(currentIndex === 0){
            newCsvLines.push(line);
        }
        else {
            newCsvLines.push("\n" + line);
        }
    });

    var csvFileName = './uploads/' + fileName + '_clean.csv';

    fs.writeFileSync(csvFileName, newCsvLines);

    var fileStream=fs.createReadStream(csvFileName);
//new converter instance
    var csvConverter=new Converter({constructResult:true});

    //end_parsed will be emitted once parsing finished
    csvConverter.on("end_parsed",function(jsonObj){
        //console.log(jsonObj); //here is your result json object
        var p = 0;
        makeRecords(jsonObj);

    });

    //read from file
    fileStream.pipe(csvConverter);

    function makeRecords(result){
        console.log(result.length);

        MongoClient.connect(url, function (err, db) {
            if (err) {
                console.log('Unable to connect to the mongoDB server. Error:', err);
            } else {
                console.log('Connection established to', url);

                var categoryName = metaFields.subjectCategory;

                var collectionName = categoryName.replace(/ /g,"_");

                db.open(function(err, client){
                    if(err){
                        console.log(err);
                    }
                    try {
                        client.createCollection(collectionName, function (err, col) {
                        });

                        var collection = db.collection(collectionName);

                        if(metaFields.subjectCategory === 'SalesforceData'){
                            //Here we will use the upsert logic to either insert new, or update existing records

                            for (var i = 0; i < result.length; i++) {
                                //console.log(result[i]);

                                var inserted = 0;

                                for (var i = 0; i < result.length; i++) {
                                    var dataRecord = result[i];

                                    dataRecord.OriginalDocumentName = fileName;
                                    dataRecord.DocumentAuthor = metaFields.documentAuthor;
                                    dataRecord.TabName = tabName;
                                    dataRecord.SubjectCategory = metaFields.subjectCategory;
                                    dataRecord.Subject = metaFields.subject;
                                    dataRecord.DateDocumentProduced = metaFields.dateDocumentProduced;
                                    dataRecord.DateDocumentReceived = metaFields.dateDocumentReceived;
                                    dataRecord.DocumentSubmitter = metaFields.documentSubmitter;
                                    dataRecord.DocumentReviewer = metaFields.documentReviewer;
                                    dataRecord.OriginalSource = metadataFields.originalSource,
                                        dataRecord.DataVersion = metadataFields.dataVersion,
                                        dataRecord.DataFields = newCsvLines[0];

                                    collection.update(
                                    {
                                        CSCOpportunityId: dataRecord.CSCOpportunityID
                                    },
                                        {
                                            $set: {
                                                CSCOpportunityId: dataRecord.CSCOpportunityID,
                                                OriginalDocumentName:   dataRecord.OriginalDocumentName,
                                                DocumentAuthor: dataRecord.DocumentAuthor,
                                                TabName:    dataRecord.TabName,
                                                SubjectCategory:    dataRecord.SubjectCategory,
                                                Subject:    dataRecord.Subject,
                                                DateDocumentProduced:   dataRecord.DateDocumentProduced,
                                                DateDocumentReceived:   dataRecord.DateDocumentReceived,
                                                DocumentSubmitter:  dataRecord.DocumentSubmitter,
                                                DocumentReviewer:   dataRecord.DocumentReviewer,
                                                OriginalSource: dataRecord.OriginalSource,
                                                DataVersion:    dataRecord.DataVersion,
                                                DataFields: dataRecord.DataFields,

                                                CSCOpportunityID : dataRecord.CSCOpportunityID,
                                                OpportunityName: dataRecord.OpportunityName ,
                                                AccountName : dataRecord.AccountName,
                                                OpportunityOwner : dataRecord.OpportunityOwner,
                                                Stage : dataRecord.Stage,
                                                Industry : dataRecord.Industry,
                                                ACV : dataRecord.ACV,
                                                RevenueStartDate : dataRecord.RevenueStartDate,
                                                RevenueTerm : dataRecord.RevenueTerm,
                                                ProbabilityPct : dataRecord.ProbabilityPct,
                                                DealRegion : dataRecord.DealRegion
                                            }
                                        },
                                        {
                                            upsert: true,
                                            multi:true
                                        },
                                        function(err,result){
                                            //console.log('update result:  ' + result);
                                            //console.log('update counter:  ' + updateCounter);
                                        }
                                        //if (++inserted == result.length) {
                                        //    console.log("finished");
                                        //    //db.close();
                                        //}
                                    );
                                }
                            }
                        }
                        else {
                            for (var i = 0; i < result.length; i++) {
                                //console.log(result[i]);

                                var inserted = 0;

                                for (var i = 0; i < result.length; i++) {
                                    var dataRecord = result[i];

                                    dataRecord.OriginalDocumentName = fileName;
                                    dataRecord.DocumentAuthor = metaFields.documentAuthor;
                                    dataRecord.TabName = tabName;
                                    dataRecord.SubjectCategory = metaFields.subjectCategory;
                                    dataRecord.Subject = metaFields.subject;
                                    dataRecord.DateDocumentProduced = metaFields.dateDocumentProduced;
                                    dataRecord.DateDocumentReceived = metaFields.dateDocumentReceived;
                                    dataRecord.DocumentSubmitter = metaFields.documentSubmitter;
                                    dataRecord.DocumentReviewer = metaFields.documentReviewer;
                                    dataRecord.OriginalSource = metadataFields.originalSource,
                                        dataRecord.DataVersion = metadataFields.dataVersion,
                                        dataRecord.DataFields = newCsvLines[0];

                                    collection.insert(dataRecord, function (err) {
                                        if (++inserted == result.length) {
                                            console.log("finished");
                                            //db.close();
                                        }
                                    });
                                }
                            }

                        }
                    }
                    catch (err) {'excel parser - main record making Error:  ' +  err}
                });

                db.open(function(err, client) {
                    var dataFields = [];
                    var dataVersions = [];

                        client.collection(collectionName).distinct("DataFields", (function (err, docs) {
                            if(err){
                                console.log(err);
                            }
                            try {
                                console.log('DataFields:  ' + docs);
                                var commaIndex = docs[0].indexOf(",");
                                if (commaIndex !== -1) {
                                    dataFields = docs[0].split(',')
                                }
                                else {
                                    dataFields.push(docs);
                                }

                                client.collection('collections_metadata').update(
                                    {
                                        collectionName: collectionName
                                    },
                                    {
                                        $set: {
                                            dataFields: dataFields

                                        }
                                    }
                                    ,
                                    {upsert: true}
                                )
                            }
                            catch (err) {console.log('excel parser - DataFields assignment Error:  ' +  err)}
                        }));

                        client.collection(collectionName).distinct("DataVersion", (function (err, docs) {
                            if(err){
                                console.log(err);
                            }
                            try {
                                var commaIndex = docs.indexOf(",");
                                if (commaIndex !== -1) {
                                    dataVersions = docs.split(',')
                                }
                                else {
                                    dataVersions = docs;
                                }
                                client.collection('collections_metadata').update(
                                    {
                                        collectionName: collectionName
                                    },
                                    {
                                        $set: {
                                            dataVersions: dataVersions
                                        }
                                    }
                                    ,
                                    {upsert: true}
                                )
                                console.log('upload finished. data version:  ' + docs);
                            }
                            catch (err) {'excel parser - DataVersion asignment Error:  ' +  err}
                        }));
                });
            }
        });
    }
};
