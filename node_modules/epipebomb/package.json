{
  "author": {
    "name": "Michael Hart"
  },
  "name": "epipebomb",
  "description": "Destroy EPIPE errors when stdout runs through a truncated pipe",
  "version": "0.1.1",
  "homepage": "https://github.com/mhart/epipebomb",
  "repository": {
    "url": "git://github.com/mhart/epipebomb.git"
  },
  "main": "epipebomb.js",
  "readme": "# EPIPE Bomb\n\nBy default, node throws `EPIPE` errors if `process.stdout` is being written to and\na user runs it through a pipe that gets closed while the process is still outputting\n(eg, the simple case of piping a node app through `head`).\n\nThis seemed a little overzealous to me, so I wrote this to suppress such errors.\n\n## Before\n\n#### example.js\n```javascript\n;(function log() {\n  console.log('tick')\n  process.nextTick(log)\n})()\n```\n\n#### Oh the humanity\n\n```shell\n$ node example.js | head\ntick\ntick\ntick\ntick\ntick\ntick\ntick\ntick\ntick\ntick\n\nevents.js:66\n        throw arguments[1]; // Unhandled 'error' event\n                       ^\nError: write EPIPE\n    at errnoException (net.js:782:11)\n    at Object.afterWrite (net.js:600:19)\n```\n\n## After\n\n#### example.js\n```javascript\nrequire('epipebomb')()\n\n;(function log() {\n  console.log('tick')\n  process.nextTick(log)\n})()\n```\n\n#### Oh the joy!\n```shell\n$ node example.js | head\ntick\ntick\ntick\ntick\ntick\ntick\ntick\ntick\ntick\ntick\n```\n\n## Notes\n\nOnly the `EPIPE` error is captured on `process.stdout` - all other errors are thrown as per usual.\n",
  "_id": "epipebomb@0.1.1",
  "dist": {
    "shasum": "aca7cc380881854142abe64b6723c792676e00b2",
    "tarball": "http://registry.npmjs.org/epipebomb/-/epipebomb-0.1.1.tgz"
  },
  "maintainers": [
    {
      "name": "hichaelmart",
      "email": "michael.hart.au@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "aca7cc380881854142abe64b6723c792676e00b2",
  "_resolved": "https://registry.npmjs.org/epipebomb/-/epipebomb-0.1.1.tgz",
  "_from": "epipebomb@*"
}
